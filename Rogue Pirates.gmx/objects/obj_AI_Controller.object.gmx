<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>aiTurnsLeft = false;
royalShipCount = 0;
merchantShipCount = 0;
npcShip = 0;
npcLength = 0;
npcTurn = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute an AI's turn, or end the round.
if(npcTurn &lt; npcLength) {
    var currentNPC = npcShip[npcTurn];
    if(instance_exists(currentNPC)){
        with(currentNPC){
            //If player gets close enough, activate.
            if(distance_to_object(obj_Player_Ship) &lt;= 128) {
                activated = true;
            }
            
            //If the NPC has been activated, it will forever do its thing.
            if(activated) {
                var obj_name = object_get_name(object_index);
                if(obj_name == 'obj_Royal_Ship') {
                    execute_royal_ship_ai(currentNPC);
                } else if(obj_name == 'obj_Merchant_Ship'){
                    execute_merchant_ship_ai(currentNPC);
                }
            } else {
                obj_AI_Controller.alarm[0] = 1;
            }
        }
    }
    npcTurn += 1;
} else {
    aiTurnsLeft = false;
    playerTurn = true;
    npcLength = 0;
    npcTurn = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI Handler

if (!playerTurn &amp;&amp; !aiTurnsLeft){
    aiTurnsLeft = true;
    var ship;
    var i;
    royalShipCount = instance_number(obj_Royal_Ship);
    merchantShipCount = instance_number(obj_Merchant_Ship);
    for(i = 0; i &lt; royalShipCount; i++) {
        npcShip[i] = instance_find(obj_Royal_Ship, i);
    }
    for(i = 0; i &lt; merchantShipCount; i++) {
        npcShip[i + (royalShipCount)] = instance_find(obj_Merchant_Ship, i);
    }
    npcLength = array_length_1d(npcShip);
    alarm[0] = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
